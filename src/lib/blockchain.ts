// Generated by @wagmi/cli@0.1.15 on 26.4.2023 at 13:54:38
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// hex
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hexABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'data1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'btcAddr',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
      {
        name: 'claimToAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrerAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Claim',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'data1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'data2',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'senderAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ClaimAssist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updaterAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DailyDataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'stakeId',
        internalType: 'uint40',
        type: 'uint40',
        indexed: true,
      },
    ],
    name: 'ShareRateChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'data1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'stakerAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'stakeId',
        internalType: 'uint40',
        type: 'uint40',
        indexed: true,
      },
    ],
    name: 'StakeEnd',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'data1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'stakerAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'stakeId',
        internalType: 'uint40',
        type: 'uint40',
        indexed: true,
      },
      {
        name: 'senderAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'StakeGoodAccounting',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'stakerAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'stakeId',
        internalType: 'uint40',
        type: 'uint40',
        indexed: true,
      },
    ],
    name: 'StakeStart',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'memberAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'entryId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'referrerAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'XfLobbyEnter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'data0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'memberAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'entryId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'referrerAddr',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'XfLobbyExit',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allocatedSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rawSatoshis', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'claimToAddr', internalType: 'address', type: 'address' },
      { name: 'pubKeyX', internalType: 'bytes32', type: 'bytes32' },
      { name: 'pubKeyY', internalType: 'bytes32', type: 'bytes32' },
      { name: 'claimFlags', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
      { name: 'autoStakeDays', internalType: 'uint256', type: 'uint256' },
      { name: 'referrerAddr', internalType: 'address', type: 'address' },
    ],
    name: 'btcAddressClaim',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes20', type: 'bytes20' }],
    name: 'btcAddressClaims',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'btcAddr', internalType: 'bytes20', type: 'bytes20' },
      { name: 'rawSatoshis', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'btcAddressIsClaimable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'btcAddr', internalType: 'bytes20', type: 'bytes20' },
      { name: 'rawSatoshis', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'btcAddressIsValid',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'claimToAddr', internalType: 'address', type: 'address' },
      { name: 'claimParamHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'pubKeyX', internalType: 'bytes32', type: 'bytes32' },
      { name: 'pubKeyY', internalType: 'bytes32', type: 'bytes32' },
      { name: 'claimFlags', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'claimMessageMatchesSignature',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentDay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'dailyData',
    outputs: [
      { name: 'dayPayoutTotal', internalType: 'uint72', type: 'uint72' },
      { name: 'dayStakeSharesTotal', internalType: 'uint72', type: 'uint72' },
      {
        name: 'dayUnclaimedSatoshisTotal',
        internalType: 'uint56',
        type: 'uint56',
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'beginDay', internalType: 'uint256', type: 'uint256' },
      { name: 'endDay', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'dailyDataRange',
    outputs: [{ name: 'list', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'beforeDay', internalType: 'uint256', type: 'uint256' }],
    name: 'dailyDataUpdate',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globalInfo',
    outputs: [{ name: '', internalType: 'uint256[13]', type: 'uint256[13]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globals',
    outputs: [
      { name: 'lockedHeartsTotal', internalType: 'uint72', type: 'uint72' },
      { name: 'nextStakeSharesTotal', internalType: 'uint72', type: 'uint72' },
      { name: 'shareRate', internalType: 'uint40', type: 'uint40' },
      { name: 'stakePenaltyTotal', internalType: 'uint72', type: 'uint72' },
      { name: 'dailyDataCount', internalType: 'uint16', type: 'uint16' },
      { name: 'stakeSharesTotal', internalType: 'uint72', type: 'uint72' },
      { name: 'latestStakeId', internalType: 'uint40', type: 'uint40' },
      { name: 'claimStats', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'merkleLeaf', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'merkleProofIsValid',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'pubKeyX', internalType: 'bytes32', type: 'bytes32' },
      { name: 'pubKeyY', internalType: 'bytes32', type: 'bytes32' },
      { name: 'claimFlags', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'pubKeyToBtcAddress',
    outputs: [{ name: '', internalType: 'bytes20', type: 'bytes20' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'pubKeyX', internalType: 'bytes32', type: 'bytes32' },
      { name: 'pubKeyY', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'pubKeyToEthAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'stakerAddr', internalType: 'address', type: 'address' }],
    name: 'stakeCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'stakeIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'stakeIdParam', internalType: 'uint40', type: 'uint40' },
    ],
    name: 'stakeEnd',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'stakerAddr', internalType: 'address', type: 'address' },
      { name: 'stakeIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'stakeIdParam', internalType: 'uint40', type: 'uint40' },
    ],
    name: 'stakeGoodAccounting',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'stakeLists',
    outputs: [
      { name: 'stakeId', internalType: 'uint40', type: 'uint40' },
      { name: 'stakedHearts', internalType: 'uint72', type: 'uint72' },
      { name: 'stakeShares', internalType: 'uint72', type: 'uint72' },
      { name: 'lockedDay', internalType: 'uint16', type: 'uint16' },
      { name: 'stakedDays', internalType: 'uint16', type: 'uint16' },
      { name: 'unlockedDay', internalType: 'uint16', type: 'uint16' },
      { name: 'isAutoStake', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newStakedHearts', internalType: 'uint256', type: 'uint256' },
      { name: 'newStakedDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'stakeStart',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'xfLobby',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'referrerAddr', internalType: 'address', type: 'address' },
    ],
    name: 'xfLobbyEnter',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'memberAddr', internalType: 'address', type: 'address' },
      { name: 'entryId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'xfLobbyEntry',
    outputs: [
      { name: 'rawAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrerAddr', internalType: 'address', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'enterDay', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'xfLobbyExit',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'xfLobbyFlush',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'xfLobbyMembers',
    outputs: [
      { name: 'headIndex', internalType: 'uint40', type: 'uint40' },
      { name: 'tailIndex', internalType: 'uint40', type: 'uint40' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'memberAddr', internalType: 'address', type: 'address' }],
    name: 'xfLobbyPendingDays',
    outputs: [
      { name: 'words', internalType: 'uint256[2]', type: 'uint256[2]' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'beginDay', internalType: 'uint256', type: 'uint256' },
      { name: 'endDay', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'xfLobbyRange',
    outputs: [{ name: 'list', internalType: 'uint256[]', type: 'uint256[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link hexABI}__.
 */
export function useHex(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: hexABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__.
 */
export function useHexRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof hexABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: hexABI, ...config } as UseContractReadConfig<
    typeof hexABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"allocatedSupply"`.
 */
export function useHexAllocatedSupply<
  TSelectData = ReadContractResult<typeof hexABI, 'allocatedSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'allocatedSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'allocatedSupply',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'allocatedSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"allowance"`.
 */
export function useHexAllowance<
  TSelectData = ReadContractResult<typeof hexABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useHexBalanceOf<
  TSelectData = ReadContractResult<typeof hexABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"btcAddressClaims"`.
 */
export function useHexBtcAddressClaims<
  TSelectData = ReadContractResult<typeof hexABI, 'btcAddressClaims'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'btcAddressClaims', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'btcAddressClaims',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'btcAddressClaims', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"btcAddressIsClaimable"`.
 */
export function useHexBtcAddressIsClaimable<
  TSelectData = ReadContractResult<typeof hexABI, 'btcAddressIsClaimable'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'btcAddressIsClaimable', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'btcAddressIsClaimable',
    ...config,
  } as UseContractReadConfig<
    typeof hexABI,
    'btcAddressIsClaimable',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"btcAddressIsValid"`.
 */
export function useHexBtcAddressIsValid<
  TSelectData = ReadContractResult<typeof hexABI, 'btcAddressIsValid'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'btcAddressIsValid', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'btcAddressIsValid',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'btcAddressIsValid', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"claimMessageMatchesSignature"`.
 */
export function useHexClaimMessageMatchesSignature<
  TSelectData = ReadContractResult<
    typeof hexABI,
    'claimMessageMatchesSignature'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof hexABI,
      'claimMessageMatchesSignature',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'claimMessageMatchesSignature',
    ...config,
  } as UseContractReadConfig<
    typeof hexABI,
    'claimMessageMatchesSignature',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"currentDay"`.
 */
export function useHexCurrentDay<
  TSelectData = ReadContractResult<typeof hexABI, 'currentDay'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'currentDay', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'currentDay',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'currentDay', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"dailyData"`.
 */
export function useHexDailyData<
  TSelectData = ReadContractResult<typeof hexABI, 'dailyData'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'dailyData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'dailyData',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'dailyData', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"dailyDataRange"`.
 */
export function useHexDailyDataRange<
  TSelectData = ReadContractResult<typeof hexABI, 'dailyDataRange'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'dailyDataRange', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'dailyDataRange',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'dailyDataRange', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"decimals"`.
 */
export function useHexDecimals<
  TSelectData = ReadContractResult<typeof hexABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"globalInfo"`.
 */
export function useHexGlobalInfo<
  TSelectData = ReadContractResult<typeof hexABI, 'globalInfo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'globalInfo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'globalInfo',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'globalInfo', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"globals"`.
 */
export function useHexGlobals<
  TSelectData = ReadContractResult<typeof hexABI, 'globals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'globals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'globals',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'globals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"merkleProofIsValid"`.
 */
export function useHexMerkleProofIsValid<
  TSelectData = ReadContractResult<typeof hexABI, 'merkleProofIsValid'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'merkleProofIsValid', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'merkleProofIsValid',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'merkleProofIsValid', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"name"`.
 */
export function useHexName<
  TSelectData = ReadContractResult<typeof hexABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"pubKeyToBtcAddress"`.
 */
export function useHexPubKeyToBtcAddress<
  TSelectData = ReadContractResult<typeof hexABI, 'pubKeyToBtcAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'pubKeyToBtcAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'pubKeyToBtcAddress',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'pubKeyToBtcAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"pubKeyToEthAddress"`.
 */
export function useHexPubKeyToEthAddress<
  TSelectData = ReadContractResult<typeof hexABI, 'pubKeyToEthAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'pubKeyToEthAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'pubKeyToEthAddress',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'pubKeyToEthAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"stakeCount"`.
 */
export function useHexStakeCount<
  TSelectData = ReadContractResult<typeof hexABI, 'stakeCount'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'stakeCount', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'stakeCount',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'stakeCount', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"stakeLists"`.
 */
export function useHexStakeLists<
  TSelectData = ReadContractResult<typeof hexABI, 'stakeLists'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'stakeLists', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'stakeLists',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'stakeLists', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"symbol"`.
 */
export function useHexSymbol<
  TSelectData = ReadContractResult<typeof hexABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useHexTotalSupply<
  TSelectData = ReadContractResult<typeof hexABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobby"`.
 */
export function useHexXfLobby<
  TSelectData = ReadContractResult<typeof hexABI, 'xfLobby'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'xfLobby', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'xfLobby',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'xfLobby', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyEntry"`.
 */
export function useHexXfLobbyEntry<
  TSelectData = ReadContractResult<typeof hexABI, 'xfLobbyEntry'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'xfLobbyEntry', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'xfLobbyEntry',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'xfLobbyEntry', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyMembers"`.
 */
export function useHexXfLobbyMembers<
  TSelectData = ReadContractResult<typeof hexABI, 'xfLobbyMembers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'xfLobbyMembers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'xfLobbyMembers',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'xfLobbyMembers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyPendingDays"`.
 */
export function useHexXfLobbyPendingDays<
  TSelectData = ReadContractResult<typeof hexABI, 'xfLobbyPendingDays'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'xfLobbyPendingDays', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'xfLobbyPendingDays',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'xfLobbyPendingDays', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyRange"`.
 */
export function useHexXfLobbyRange<
  TSelectData = ReadContractResult<typeof hexABI, 'xfLobbyRange'>,
>(
  config: Omit<
    UseContractReadConfig<typeof hexABI, 'xfLobbyRange', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: hexABI,
    functionName: 'xfLobbyRange',
    ...config,
  } as UseContractReadConfig<typeof hexABI, 'xfLobbyRange', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__.
 */
export function useHexWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof hexABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, TFunctionName>({
    abi: hexABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"approve"`.
 */
export function useHexApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'approve'>({
    abi: hexABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"btcAddressClaim"`.
 */
export function useHexBtcAddressClaim<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'btcAddressClaim'>['abi'],
        'btcAddressClaim'
      > & { functionName?: 'btcAddressClaim' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'btcAddressClaim'> & {
        abi?: never
        functionName?: 'btcAddressClaim'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'btcAddressClaim'>({
    abi: hexABI,
    functionName: 'btcAddressClaim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"dailyDataUpdate"`.
 */
export function useHexDailyDataUpdate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'dailyDataUpdate'>['abi'],
        'dailyDataUpdate'
      > & { functionName?: 'dailyDataUpdate' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'dailyDataUpdate'> & {
        abi?: never
        functionName?: 'dailyDataUpdate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'dailyDataUpdate'>({
    abi: hexABI,
    functionName: 'dailyDataUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useHexDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'decreaseAllowance'>({
    abi: hexABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useHexIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'increaseAllowance'>({
    abi: hexABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"stakeEnd"`.
 */
export function useHexStakeEnd<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'stakeEnd'>['abi'],
        'stakeEnd'
      > & { functionName?: 'stakeEnd' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'stakeEnd'> & {
        abi?: never
        functionName?: 'stakeEnd'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'stakeEnd'>({
    abi: hexABI,
    functionName: 'stakeEnd',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"stakeGoodAccounting"`.
 */
export function useHexStakeGoodAccounting<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'stakeGoodAccounting'>['abi'],
        'stakeGoodAccounting'
      > & { functionName?: 'stakeGoodAccounting' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'stakeGoodAccounting'> & {
        abi?: never
        functionName?: 'stakeGoodAccounting'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'stakeGoodAccounting'>({
    abi: hexABI,
    functionName: 'stakeGoodAccounting',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"stakeStart"`.
 */
export function useHexStakeStart<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'stakeStart'>['abi'],
        'stakeStart'
      > & { functionName?: 'stakeStart' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'stakeStart'> & {
        abi?: never
        functionName?: 'stakeStart'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'stakeStart'>({
    abi: hexABI,
    functionName: 'stakeStart',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"transfer"`.
 */
export function useHexTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'transfer'>({
    abi: hexABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useHexTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'transferFrom'>({
    abi: hexABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyEnter"`.
 */
export function useHexXfLobbyEnter<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'xfLobbyEnter'>['abi'],
        'xfLobbyEnter'
      > & { functionName?: 'xfLobbyEnter' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'xfLobbyEnter'> & {
        abi?: never
        functionName?: 'xfLobbyEnter'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'xfLobbyEnter'>({
    abi: hexABI,
    functionName: 'xfLobbyEnter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyExit"`.
 */
export function useHexXfLobbyExit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'xfLobbyExit'>['abi'],
        'xfLobbyExit'
      > & { functionName?: 'xfLobbyExit' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'xfLobbyExit'> & {
        abi?: never
        functionName?: 'xfLobbyExit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'xfLobbyExit'>({
    abi: hexABI,
    functionName: 'xfLobbyExit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyFlush"`.
 */
export function useHexXfLobbyFlush<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hexABI, 'xfLobbyFlush'>['abi'],
        'xfLobbyFlush'
      > & { functionName?: 'xfLobbyFlush' }
    : UseContractWriteConfig<TMode, typeof hexABI, 'xfLobbyFlush'> & {
        abi?: never
        functionName?: 'xfLobbyFlush'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hexABI, 'xfLobbyFlush'>({
    abi: hexABI,
    functionName: 'xfLobbyFlush',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__.
 */
export function usePrepareHexWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareHexApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"btcAddressClaim"`.
 */
export function usePrepareHexBtcAddressClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'btcAddressClaim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'btcAddressClaim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'btcAddressClaim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"dailyDataUpdate"`.
 */
export function usePrepareHexDailyDataUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'dailyDataUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'dailyDataUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'dailyDataUpdate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareHexDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareHexIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"stakeEnd"`.
 */
export function usePrepareHexStakeEnd(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'stakeEnd'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'stakeEnd',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'stakeEnd'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"stakeGoodAccounting"`.
 */
export function usePrepareHexStakeGoodAccounting(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'stakeGoodAccounting'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'stakeGoodAccounting',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'stakeGoodAccounting'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"stakeStart"`.
 */
export function usePrepareHexStakeStart(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'stakeStart'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'stakeStart',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'stakeStart'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareHexTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareHexTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyEnter"`.
 */
export function usePrepareHexXfLobbyEnter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'xfLobbyEnter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'xfLobbyEnter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'xfLobbyEnter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyExit"`.
 */
export function usePrepareHexXfLobbyExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'xfLobbyExit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'xfLobbyExit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'xfLobbyExit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hexABI}__ and `functionName` set to `"xfLobbyFlush"`.
 */
export function usePrepareHexXfLobbyFlush(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hexABI, 'xfLobbyFlush'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hexABI,
    functionName: 'xfLobbyFlush',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hexABI, 'xfLobbyFlush'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__.
 */
export function useHexEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hexABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: hexABI, ...config } as UseContractEventConfig<
    typeof hexABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"Approval"`.
 */
export function useHexApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"Claim"`.
 */
export function useHexClaimEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'Claim'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'Claim',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'Claim'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"ClaimAssist"`.
 */
export function useHexClaimAssistEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'ClaimAssist'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'ClaimAssist',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'ClaimAssist'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"DailyDataUpdate"`.
 */
export function useHexDailyDataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'DailyDataUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'DailyDataUpdate',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'DailyDataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"ShareRateChange"`.
 */
export function useHexShareRateChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'ShareRateChange'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'ShareRateChange',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'ShareRateChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"StakeEnd"`.
 */
export function useHexStakeEndEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'StakeEnd'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'StakeEnd',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'StakeEnd'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"StakeGoodAccounting"`.
 */
export function useHexStakeGoodAccountingEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'StakeGoodAccounting'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'StakeGoodAccounting',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'StakeGoodAccounting'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"StakeStart"`.
 */
export function useHexStakeStartEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'StakeStart'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'StakeStart',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'StakeStart'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"Transfer"`.
 */
export function useHexTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"XfLobbyEnter"`.
 */
export function useHexXfLobbyEnterEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'XfLobbyEnter'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'XfLobbyEnter',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'XfLobbyEnter'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hexABI}__ and `eventName` set to `"XfLobbyExit"`.
 */
export function useHexXfLobbyExitEvent(
  config: Omit<
    UseContractEventConfig<typeof hexABI, 'XfLobbyExit'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: hexABI,
    eventName: 'XfLobbyExit',
    ...config,
  } as UseContractEventConfig<typeof hexABI, 'XfLobbyExit'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}
